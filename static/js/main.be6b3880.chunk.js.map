{"version":3,"sources":["Components/FactCard.js","Screens/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["FactCard","props","state","yPos","Math","random","showSource","firstColor","toString","substr","secondColor","left","this","upBob","setInterval","changeFactor","pow","abs","setState","right","style","backgroundImage","borderRadius","borderColor","borderStyle","borderWidth","padding","marginTop","marginBottom","width","boxShadow","transition","transform","ref","absPosDiv","margin","text","textAlign","animation","onClick","src","React","Component","HomeScreen","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAEqBA,E,YACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAKVC,MAAM,CACFC,KAAmB,GAAdC,KAAKC,SAAY,EACtBC,YAAW,GANX,EAAKC,WAAa,IAAIH,KAAKC,SAASG,SAAS,IAAIC,OAAO,EAAE,GAAG,KAC7D,EAAKC,YAAc,IAAIN,KAAKC,SAASG,SAAS,IAAIC,OAAO,EAAE,GAAG,KAC9D,EAAKE,KAAOP,KAAKC,SAAS,GAJZ,E,iFAUE,IAAD,OACfO,KAAKC,MAAQT,KAAKC,SAAS,GAC3BS,aAAY,WACL,EAAKZ,MAAMC,KAAK,EACf,EAAKU,OAAQ,EACT,EAAKX,MAAMC,MAAM,IACrB,EAAKU,OAAQ,GACjB,IAAIE,EAA2D,IAA3C,EAAEX,KAAKY,IAAIZ,KAAKa,IAAI,EAAKf,MAAMC,MAAM,EAAE,IAAO,KAClE,EAAKe,SAAS,CAACf,KAAK,EAAKU,MAAM,EAAKX,MAAMC,KAAKY,EAAa,EAAKb,MAAMC,KAAKY,MAC9E,M,+BAEG,IAAD,OACJ,OACI,kBAAC,IAAD,CAAMJ,KAAMC,KAAKD,KAAMQ,OAAQP,KAAKD,MAChC,6BACI,yBAAKS,MAAO,CACRC,gBAAgB,oCAAoCT,KAAKL,WAAW,KAAKK,KAAKF,YAAY,IAC1FY,aAAa,EACbC,YAAY,OACZC,YAAY,QACZC,YAAY,EACZC,QAAQ,EACRC,UAAU,GACVC,aAAa,GACbC,MAAM,OACNC,WAAY,EAAElB,KAAKV,MAAMC,MAAM,EAAE,OAAO,EAAES,KAAKV,MAAMC,MAAM,eAC3D4B,WAAY,yBACZC,UAAW,cAAcpB,KAAKV,MAAMC,KAAK,kBAAkBS,KAAKV,MAAMC,KAAK,EAAE,OAC9E8B,IAAKrB,KAAKsB,WACT,uBAAGd,MAAO,CAACe,OAAO,IAAKvB,KAAKX,MAAMmC,OAChCxB,KAAKV,MAAMI,YAAc,uBAAGc,MAAO,CAACiB,UAAU,QAAQX,QAAQ,EAAES,OAAO,EAAGG,UAAW,oBAAoB,2BAAOC,QAAS,kBAAI,EAAKrB,SAAS,CAACZ,YAAW,MAA9C,gBAC1GM,KAAKV,MAAMI,YAAc,2BAAOc,MAAO,CAACkB,UAAW,mBAAoB1B,KAAKX,MAAMuC,Y,GA1CrEC,IAAMC,WCAvBC,E,iLAEb,OACI,yBAAKC,UAAU,aACX,kBAAC,EAAD,CAAUR,KAAK,OAAOI,IAAI,WAC1B,kBAAC,EAAD,CAAUJ,KAAK,OAAOI,IAAI,WAC1B,kBAAC,EAAD,CAAUJ,KAAK,OAAOI,IAAI,WAC1B,kBAAC,EAAD,CAAUJ,KAAK,OAAOI,IAAI,gB,GAPFC,IAAMC,WCQ/BG,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be6b3880.chunk.js","sourcesContent":["import React from 'react';\r\nimport Fade from 'react-reveal/Fade';\r\nexport default class FactCard extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.firstColor = '#'+Math.random().toString(16).substr(2,6)+\"30\"\r\n        this.secondColor = '#'+Math.random().toString(16).substr(2,6)+\"30\"\r\n        this.left = Math.random()>.5\r\n    }\r\n    state={\r\n        yPos:Math.random()*10-5,\r\n        showSource:false,\r\n    }\r\n    componentDidMount(){\r\n        this.upBob = Math.random()>.5\r\n        setInterval(()=>{\r\n            if(this.state.yPos>5)\r\n                this.upBob = false\r\n            else if(this.state.yPos<-5)\r\n                this.upBob = true\r\n            let changeFactor = (1-Math.pow(Math.abs(this.state.yPos)/5,2))*.1+.001\r\n            this.setState({yPos:this.upBob?this.state.yPos+changeFactor:this.state.yPos-changeFactor})\r\n        },10)\r\n    }\r\n    render(){\r\n        return(\r\n            <Fade left={this.left} right={!this.left}>\r\n                <div>\r\n                    <div style={{\r\n                        backgroundImage:\"linear-gradient(to bottom right, \"+this.firstColor+\", \"+this.secondColor+\")\", \r\n                        borderRadius:5, \r\n                        borderColor:\"grey\", \r\n                        borderStyle:\"solid\", \r\n                        borderWidth:2, \r\n                        padding:5, \r\n                        marginTop:10, \r\n                        marginBottom:10, \r\n                        width:\"100%\",\r\n                        boxShadow: (5-this.state.yPos)/2+\"px \"+(5-this.state.yPos)+\"px lightgrey\",\r\n                        transition: \"transform 100ms linear\",\r\n                        transform: \"translateY(\"+this.state.yPos+\"px) translateX(\"+this.state.yPos/2+\"px)\"\r\n                    }} ref={this.absPosDiv}>\r\n                        <p style={{margin:0}}>{this.props.text}</p>\r\n                        {!this.state.showSource && <p style={{textAlign:\"right\",padding:0,margin:0, animation: \"fadeIn ease 10s\"}}><small onClick={()=>this.setState({showSource:true})}>View Source</small></p>}\r\n                        {this.state.showSource && <small style={{animation: \"fadeIn ease 2s\"}}>{this.props.src}</small>}\r\n                    </div>\r\n                </div>\r\n            </Fade>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport FactCard from '../Components/FactCard';\r\nexport default class HomeScreen extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <FactCard text=\"FACT\" src=\"SOURCE\"/>\r\n                <FactCard text=\"FACT\" src=\"SOURCE\"/>\r\n                <FactCard text=\"FACT\" src=\"SOURCE\"/>\r\n                <FactCard text=\"FACT\" src=\"SOURCE\"/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './Screens/HomeScreen';\r\n\r\nfunction App() {\r\n  return (\r\n    <HomeScreen/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}